#include <stdio.h>
#include <errno.h> // for strerror(errno)
// #include <fcntl.h> // flags for 'open', eg O_WRONLY, O_SYNC, etc
#include <string.h> // for strerror also?
#include <math.h> // fabs, M_PI
#include <stdlib.h> // exit,  EXIT_FAILURE
#include <unistd.h> // usleep, pread


#include "util-jpp.h"
#include "bb-simple-sysfs-c-lib.h"

#define MAX_SLEEP_SEC (0.000)
#define USEC_PER_SEC (1E6)


///////////////////////////////////////////////////////////
// Tests

void test_eqep() {

  printf("Running test: %s\n",__FUNCTION__);

  // Test shaft_angle_deg
  setup();
 
  int i=0; 
  int n=10;
  for(i=0; i<n; i++) {
    printf("%d/%d: Shaft angle (deg): %lf\n", i,n,shaft_angle_deg());
    sleep(1);
  }

  shutdown();

  printf("Test complete: %s\n",__FUNCTION__);

}


void test_voltage_sine() {

  printf("Running test: %s\n",__FUNCTION__);

  setup();
  unstby();
  run();
  cw();

  double dt = 0.1; // sec, time per iteration
  double max_time = 5; // sec, max time of sim
  int num_iters = max_time / dt;
  double freq = 1; // Hz, controls how fast the duty cycle changes

  int i=0;
  for( i=0; i<num_iters; i++ ) {
    printf("%d/%d: Shaft angle (deg): %lf\n", i,num_iters,shaft_angle_deg());
    double v = MAX_VOLTAGE * sin(2.0 * M_PI * freq * dt * i);
    voltage(v);
    double usleepfor = dt*1000000.0;
    //    printf("Sleeping for %lf us...\n",usleepfor);
    usleep(usleepfor);
  }

  voltage(0);
  stop();
  stby();
  shutdown();

  printf("Test complete: %s\n",__FUNCTION__);
}


void test_p ( double kp ) {

  printf("Running test: %s\n",__FUNCTION__);

  setup();
  unstby();
  run();
  cw();

  //   double kp = -.015;
  //  if( argc > 1 ) {
  //    printf("input: %s\n",argv[1]);
  //    kp = atof(argv[1]);
  //  }

  printf("kp: %lf\n",kp);

  const double dt = 0.1; // sec, time per iteration
  const double max_time = 10; // sec, max time of sim
  const int num_iters = max_time / dt;
  const double freq = 1; // Hz, controls how fast the reference angle changes

  int i=0;
  for( i=0; i<num_iters; i++ ) {
    double angle = shaft_angle_deg();
    double ref = 180 * sin(2.0 * M_PI * freq * dt * i); // deg
    double error = ref-angle;
    double v = kp * error;
    printf("iter: %d, angle: %f, ref: %f, err: %f, volt: %f\n",
	   i,angle,ref,error,v);
    if( v>MAX_VOLTAGE ) v=MAX_VOLTAGE;
    if( v<-MAX_VOLTAGE) v=-MAX_VOLTAGE;
    voltage(v);
    usleep(dt*1000000.0);
  }

  stop();

  shutdown();

  printf("Test complete: %s\n",__FUNCTION__);

}


int test_pid ( double duration, double kp, double ki, double kd, char* out_name ) {

  //  printf("Running test: %s\n",__FUNCTION__);

  setup();
  unstby();
  run();
  cw();

  printf("duration: %lf kp: %lf ki: %lf kd: %lf\n",duration, kp, ki, kd);

  const double dt = 0.005; // sec, time per iteration
  const double max_time = duration; // sec, max time of sim
  const int num_iters = max_time / dt;
  const int N = num_iters;
  const double freq = .25; // Hz, controls how fast the reference angle changes

  // Warning: These are all doubles because if you printf or fprintf an int using %lf it produces garbage,  ugh.
  // http://stackoverflow.com/questions/16607628/printing-int-as-float-in-c

  double step[N]       ; for(int i=0;i<N;i++) step[i]=0;
  double cputime[N]    ; for(int i=0;i<N;i++) cputime[i]=0;
  double cputimediff[N]; for(int i=0;i<N;i++) cputimediff[i]=0;
  double angle[N]      ; for(int i=0;i<N;i++) angle[i]=0;
  double ref[N]        ; for(int i=0;i<N;i++) ref[i]=0;
  double error[N]      ; for(int i=0;i<N;i++) error[i]=0;
  double ierror[N]     ; for(int i=0;i<N;i++) ierror[i]=0;
  double derror[N]     ; for(int i=0;i<N;i++) derror[i]=0;
  double pterm[N]      ; for(int i=0;i<N;i++) pterm[i]=0;
  double iterm[N]      ; for(int i=0;i<N;i++) iterm[i]=0;
  double dterm[N]      ; for(int i=0;i<N;i++) dterm[i]=0;
  double v[N]          ; for(int i=0;i<N;i++) v[i]=0;
  double imax = 2; // max volts allowed volts

  for( int i=0; i<num_iters; i++ ) {
    toc(&(cputime[i]), &(cputimediff[i]) );
    step[i]    	  = i;
    angle[i]   	  = shaft_angle_deg();
    //    double fake_preemption_usecs = (double)(rand()) / RAND_MAX * MAX_SLEEP_SEC * USEC_PER_SEC;
    //    printf("Gonna sleep %lf\n",fake_preemption_usecs);
    //    usleep(fake_preemption_usecs); // Simulate pre-emption
    ref[i]     	  = 180 * sin(2.0 * M_PI * freq * cputime[i]); // deg
     if(ref[i]>0) ref[i]=180; else ref[i]=-180; // make square wave.
    error[i]   	  = ref[i]-angle[i];
    // Integral term: 
    // - if 1st iter, don't add prev integral
    // - if real delta-time <=0, don't add current integral.
    double prev_int = i>0 ? ierror[i-1] : 0;
    double cur_int  = cputimediff[i]>0 ? error[i]*cputimediff[i] : 0;
    ierror[i]       = prev_int + cur_int;
    //ierror[i] = (i>0) ? (ierror[i-1] + error[i] * dt) : error[i]*dt; // old; dt is constant
    derror[i]       = cputimediff[i]>0 && i>0 ? (error[i] - error[i-1])/cputimediff[i] : 0;
    pterm[i]        = kp * error[i];
    iterm[i]        = ki * ierror[i];
    // Don't integrate if it's wound up
    if( iterm[i] > imax || iterm[i] < -imax) { iterm[i] = iterm[i-1]; ierror[i] = ierror[i-1]; } 
    dterm[i]      = kd * derror[i];
    v[i]          = pterm[i] + iterm[i] + dterm[i];
    if( v[i]>MAX_VOLTAGE ) v[i]=MAX_VOLTAGE;
    if( v[i]<-MAX_VOLTAGE) v[i]=-MAX_VOLTAGE;
    voltage(v[i]);
    usleep(dt*USEC_PER_SEC);
  }

  stop();

  shutdown();

  printf("Test complete: %s\n",__FUNCTION__);

  printf("Writing data to %s...\n",out_name);

  // files to hold results
  FILE* fp;
  /* FILE* flog; */

    fp = fopen(out_name, "w");
    /* flog = fopen("runlog.txt","w"); */

    // Configure the data file and log file to be "fully buffered",
    // meaning that they won't write to disk until explicitly told (or closed).
    // https://www.chemie.fu-berlin.de/chemnet/use/info/libc/libc_7.html#SEC118
    /* #define fp_buf_size 999999 */
    /* #define flog_buf_size  999999 */
    /* char fp_buf[fp_buf_size] = {}; */
    /* char flog_buf[flog_buf_size] = {}; */
    /* int retval = 0; */
    /* if( (retval = setvbuf( fp, fp_buf, _IOFBF, fp_buf_size )) != 0 ) { */
    /*   printf("BAD: setvbuf returned %d\n",retval); */
    /* } */
    /* if( (retval = setvbuf( flog, flog_buf, _IOFBF, flog_buf_size )) != 0 ) { */
    /*   printf("BAD: setvbuf returned %d\n",retval); */
    /* } */
    /* char stdout_buf[fp_buf_size] = {}; */
    /* if((retval=setvbuf(stdout, stdout_buf, _IOFBF, fp_buf_size))!=0) { */
    /*   printf("bad: setvbuf returned %d\n",retval); */
    /*   return EXIT_FAILURE; */
    /* } */
    /* char stderr_buf[fp_buf_size] = {}; */
    /* if((retval=setvbuf(stderr, stderr_buf, _IOFBF, fp_buf_size))!=0) { */
    /*   printf("bad: setvbuf returned %d\n",retval); */
    /*   return EXIT_FAILURE; */
    /* } */

    // Header row
    fprintf(fp,"%11s %11s %11s %11s %11s %11s %11s %11s %11s %11s %11s %11s\n",
	    "step",
	    "cputime",
	    "cputimediff",
	    "angle", 
	    "ref", 
	    "error",
	    "ierror",
	    "derror",  
	    "pterm",
	    "iterm",
	    "dterm",
	    "v");

  // Write data
  for( int i=0; i<num_iters; i++ ) {

    fprintf(fp,"%11lf %11lf %11lf %11lf %11lf %11lf %11lf %11lf %11lf %11lf %11lf %11lf\n",
	    step[i],
	    cputime[i],
	    cputimediff[i],
	    angle[i], 
	    ref[i], 
	    error[i],
	    ierror[i],
	    derror[i],  
	    pterm[i],
	    iterm[i],
	    dterm[i],
	    v[i]);

  }

  fclose(fp);

  printf("%s %s (%d): Bye!\n",__FILE__,__FUNCTION__,__LINE__);

  return 0;
}


int test_sysid (char* input_type, double duration, double freq0, double freq1, char* out_name ) {

  printf("Running test: %s\n",__FUNCTION__);

  setup();
  unstby();
  run();
  cw();

  const double dt = 0.005; // sec, time per iteration
  const double max_time = duration; // sec, max time of sim
  const int num_iters = max_time / dt;
  const int N = num_iters;

  // Warning: These are all doubles because if you printf or fprintf an int using %lf it produces garbage,  ugh.
  // http://stackoverflow.com/questions/16607628/printing-int-as-float-in-c

  double step[N]       ; for(int i=0;i<N;i++) step[i]=0;
  double cputime[N]    ; for(int i=0;i<N;i++) cputime[i]=0;
  double cputimediff[N]; for(int i=0;i<N;i++) cputimediff[i]=0;
  double angle[N]      ; for(int i=0;i<N;i++) angle[i]=0;
  double v[N]          ; for(int i=0;i<N;i++) v[i]=0;

  // https://en.wikipedia.org/wiki/Chirp
  double f0 = freq0;
  double f1 = freq1;
  double T = duration;
  double k = (f1-f0)/T;

  // Pre-Build voltage vector.
  for( int i=0; i<num_iters; i++ ) {
    double t = i*dt;
    if( strcmp(input_type,"chirp")==0 ) {
      v[i]          = MAX_VOLTAGE*sin(M_PI/2 + 2*M_PI*(f0*t+k/2.0*t*t));
    } else if( strcmp(input_type,"square_chirp")==0 ) {
      v[i]          = MAX_VOLTAGE*(sin(M_PI/2 + 2*M_PI*(f0*t+k/2.0*t*t))>0 ? 1 : -1);
    }
    else {
      printf("%s (%d): Was expecting \"chirp\" or \"square_chirp\", not %s plz!\n",
	     __FUNCTION__,__LINE__,input_type);
    }
    if( v[i]>MAX_VOLTAGE ) v[i]=MAX_VOLTAGE;
    if( v[i]<-MAX_VOLTAGE) v[i]=-MAX_VOLTAGE;
  }


  // Run the motor.
  toc(&(cputime[0]), &(cputimediff[0]) ); // clear diff buffer
  for( int i=0; i<num_iters; i++ ) {
    toc(&(cputime[i]), &(cputimediff[i]) );
    step[i]    	  = i;
    angle[i]   	  = shaft_angle_deg();
    voltage(v[i]);
    usleep(dt*1000000.0);
  }

  stop();

  shutdown();

  printf("Test complete: %s\n",__FUNCTION__);

  printf("Writing data to %s...\n",out_name);

  // files to hold results
  FILE* fp;
  /* FILE* flog; */

    fp = fopen(out_name, "w");
    /* flog = fopen("runlog.txt","w"); */

    // Configure the data file and log file to be "fully buffered",
    // meaning that they won't write to disk until explicitly told (or closed).
    // https://www.chemie.fu-berlin.de/chemnet/use/info/libc/libc_7.html#SEC118
    /* #define fp_buf_size 999999 */
    /* #define flog_buf_size  999999 */
    /* char fp_buf[fp_buf_size] = {}; */
    /* char flog_buf[flog_buf_size] = {}; */
    /* int retval = 0; */
    /* if( (retval = setvbuf( fp, fp_buf, _IOFBF, fp_buf_size )) != 0 ) { */
    /*   printf("BAD: setvbuf returned %d\n",retval); */
    /* } */
    /* if( (retval = setvbuf( flog, flog_buf, _IOFBF, flog_buf_size )) != 0 ) { */
    /*   printf("BAD: setvbuf returned %d\n",retval); */
    /* } */
    /* char stdout_buf[fp_buf_size] = {}; */
    /* if((retval=setvbuf(stdout, stdout_buf, _IOFBF, fp_buf_size))!=0) { */
    /*   printf("bad: setvbuf returned %d\n",retval); */
    /*   return EXIT_FAILURE; */
    /* } */
    /* char stderr_buf[fp_buf_size] = {}; */
    /* if((retval=setvbuf(stderr, stderr_buf, _IOFBF, fp_buf_size))!=0) { */
    /*   printf("bad: setvbuf returned %d\n",retval); */
    /*   return EXIT_FAILURE; */
    /* } */

    // Header row
    fprintf(fp,"%11s %11s %11s %11s %11s\n",
	    "step",
	    "cputime",
	    "cputimediff",
	    "angle", 
	    "v");

  // Write data
  for( int i=0; i<num_iters; i++ ) {

    fprintf(fp,"%11lf %11lf %11lf %11lf %11lf\n",
	    step[i],
	    cputime[i],
	    cputimediff[i],
	    angle[i], 
	    v[i]);

  }

  fclose(fp);

  return 0;
}























///////////////////////////////////////////////////////////////////////////
///////////////////////////////////////////////////////////////////////////
// Preliminary tests (they don't necessarily use the lib, they're for debugging)

void test_eqep_1() {

  extern int fd_eqep_position;

  printf("Running test: %s\n",__FUNCTION__);
  setup();
  char b;
  int i;
  int max = 10;
  int ctr = 0;
  do {
    ctr++;
    if( ctr > max ) { printf("Max reached!\n"); break; }
    b = 99;
    i = pread(fd_eqep_position,&b,1,0);
  printf("read returned: %d (%s)\n",i, strerror(errno));
  printf("byte: %d\n",b);
  } while( i > 0);
  shutdown();

  printf("Test complete: %s\n",__FUNCTION__);
}


void test_eqep_2() {
  printf("Running test: %s\n",__FUNCTION__);

  extern int fd_eqep_position;

  setup();
  char b[10];
  int ii = 0;
  for( ii=0; ii<5; ii++ ) {
    int i = pread(fd_eqep_position,b,10,0);
    printf("read returned: %d (%s)\n",i, strerror(errno));
    printf("b: %s\n",b);
    int j;
    for( j=0; j<i; j++ ) {
      printf("byte %d: %d\n",j,b[j]);
    }
    sleep(1);
  }
  shutdown();
  printf("Test complete: %s\n",__FUNCTION__);
}






void test_motor_dir_pin2() {
  printf("Running test: %s\n",__FUNCTION__);
  printf("(Test motor dir pin, with fn calls.)\n");
  
  printf("ccw");
  ccw();
  sleep(1);
  printf("cw");
  cw();
  sleep(1);
  printf("ccw");
  ccw();
  sleep(1);
  printf("cw");
  cw();
  sleep(1);
  printf("ccw");
  ccw();
  sleep(1);
  printf("cw");
  cw();
  sleep(1);
  printf("Test complete: %s\n",__FUNCTION__);
}

void test_stby_pin() {
  printf("Running test: %s\n",__FUNCTION__);
  
  printf("stby");
  stby();
  sleep(1);
  printf("unstby");
  unstby();
  sleep(1);
  printf("stby");
  stby();
  sleep(1);
  printf("unstby");
  unstby();
  sleep(1);
  printf("stby");
  stby();
  sleep(1);
  printf("unstby");
  unstby();
  sleep(1); 
  printf("stby");
  stby();
  printf("Test complete: %s\n",__FUNCTION__);
}


void test_rawduty() {
  printf("Running test: %s\n",__FUNCTION__);
  printf("(Test PWM duty cycle.)\n");
  
  setup();
  unstby();
  run();
  rawduty("20000",5);
  sleep(2);
  rawduty("10000",5);
  sleep(2);
  rawduty("0",1);
  sleep(2);
  stby();
  stop();
  printf("Test complete: %s\n",__FUNCTION__);
}


void test_rawduty2() {
  printf("Running test: %s\n",__FUNCTION__);
  printf("(Test PWM duty cycle.)\n");
  
  setup();
  unstby();
  run();
  
  cw();
  rawduty("20000",5);
  sleep(1);
  ccw();
  rawduty("15000",5);
  sleep(1);
  cw();
  rawduty("10000",5);
  sleep(1);
  ccw();
  rawduty("5000",4);
  sleep(1);
  cw();
  rawduty("1000",4);
  sleep(1);
  ccw();
  rawduty("0",1);
  sleep(1);
  cw();
  rawduty("5000",4);
  sleep(1);
  ccw();
  rawduty("10000",5);
  sleep(1);
  cw();
  rawduty("15000",5);
  sleep(1);
  ccw();
  rawduty("20000",5);
  sleep(1);
  stop();
  printf("Test complete: %s\n",__FUNCTION__);
}

void test_duty() {
  printf("Running test: %s\n",__FUNCTION__);

  setup();

  unstby();
  run();

  int duties[] = {0, 20, 40, 60, 80, 100, 80, 60, 40, 20, 0};
  int n = 11;
  int i=0;
  for( i=0; i<n; i++ ) {
    printf("i=%d / %d\n",i,n);
    if( i%2==0 ) cw();
    else         ccw();
    duty(duties[i]);
    sleep(1);
  }

  stop();
  printf("Test complete: %s\n",__FUNCTION__);
}




void test_duty_sine() {

  printf("Running test: %s\n",__FUNCTION__);
  printf("Test duty() with doubles: change the duty cycle sinusoidally.\n");

  setup();
  unstby();
  run();
  cw();

  double dt = 0.1; // sec, time per iteration
  double max_time = 5; // sec, max time of sim
  int num_iters = max_time / dt;
  double freq = 1; // Hz, controls how fast the duty cycle changes

  int i=0;
  for( i=0; i<num_iters; i++ ) {

    double d = 50.0 + 50.0 * sin(2.0 * M_PI * freq * dt * i);
    duty(d);
    usleep(dt*1000000.0);
  }

  stop();
  shutdown();
  printf("Test complete: %s\n",__FUNCTION__);
}
  


